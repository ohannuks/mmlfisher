# Main script to run an example FIM analysis using the data generated by Laura in the ./data directory. 
import numpy as np
import jax 
jax.config.update("jax_enable_x64", True)
import matplotlib.pyplot as plt
from corner import corner
from fim.gwlikelihood import get_gw_likelihood_params
from fim.imagelikelihood import get_image_likelihood_params
from fim.covariancematrix import compute_inverse_covariance_matrix
from fim.defaults import cosmo

if __name__ == "__main__":
    # Lens mass model:
    lens_model_list = ['SIS']
    kwargs_lens = [{'theta_E': 1.5, 'center_x': 0., 'center_y': 0.}] # Lens mass model parameters
    # Source light model:
    source_light_model_list = ['SERSIC_ELLIPSE']
    kwargs_source = [ {'amp': 4.0, 'R_sersic': 0.2, 'n_sersic': 2., 'e1': 0.05, 'e2': 0.05, 'center_x': 0.05, 'center_y': 0.1}] # Source model parameters
    # Lens light model:
    lens_light_model_list = ['SERSIC_ELLIPSE']
    kwargs_lens_light = [{'amp': 8.0, 'R_sersic': 1.0, 'n_sersic': 3., 'e1': 0.01, 'e2': 0.01, 'center_x': 0., 'center_y': 0.}]
    # Gravitational-wave model:
    kwargs_gw = [{"src_center_x": 0.01, "src_center_y": 0.01}] # Gravitational-wave parameters
    # Add all inference parameters to a dictionary:
    kwargs_params_maxP = dict(kwargs_lens=kwargs_lens, 
                         kwargs_source=kwargs_source, 
                         kwargs_lens_light=kwargs_lens_light, 
                         kwargs_gw=kwargs_gw) 

    # Image likelihood:
    kwargs_image_likelihood = get_image_likelihood_params(kwargs_params_maxP, lens_model_list=lens_model_list, source_light_model_list=source_light_model_list, lens_light_model_list=lens_light_model_list, npix=80, pix_scl=0.08, fwhm=0.3)
    # Gravitational-wave likelihood:
    log_sigma_t, log_sigma_d = 0.05, 0.1 # ~ 5% and 10% errors on time delays and luminosity distances
    fixed_parameters = {'zl': 0.5, 'zs': 2.0, 'luminosity_distance': cosmo.luminosity_distance(2.0).value} # Fixed parameters for the gravitational-wave likelihood (This monstrosity is needed because jax hates derivatives of luminosity distances and because in most cases we assume them to be fixed)
    kwargs_gw_likelihood = get_gw_likelihood_params(kwargs_params_maxP, log_sigma_t, log_sigma_d, lens_model_list, fixed_parameters)
    # Add all parameters to a dictionary:
    kwargs_likelihood = dict( kwargs_image_likelihood=kwargs_image_likelihood,
                                kwargs_gw_likelihood=kwargs_gw_likelihood)
    
    # Get covariance matrix:
    import jax.numpy as jnp
    keys, hess_log_likelihood = compute_inverse_covariance_matrix( kwargs_params_maxP, kwargs_likelihood, log_prior=None, lens_model_list=lens_model_list, fixed_parameters=fixed_parameters )
    hessian_matrix_form = jnp.array([[hess_log_likelihood[keys[i]][keys[j]] for j in range(len(keys))] for i in range(len(keys))])
    
    # Take the covariance matrix:
    cov_matrix = jnp.linalg.inv(hessian_matrix_form)

    # Sample from the covariance matrix:
    n_samples = 10000
    samples = np.random.multivariate_normal(np.zeros(len(keys)), cov_matrix, n_samples)
    # Add the mean parameters to the samples:
    mean_params = np.zeros(len(keys))
    from fim.dictionaryconversions import flatten_dictionary
    kwargs_params_maxP = flatten_dictionary(kwargs_params_maxP)
    for i in range(len(keys)):
        mean_params[i] = kwargs_params_maxP[keys[i]]
    samples += mean_params
    # Make a corner plot
    fig = corner(samples, labels=keys, truths=mean_params)
    plt.savefig('corner_plot.pdf', bbox_inches='tight')
    plt.close()